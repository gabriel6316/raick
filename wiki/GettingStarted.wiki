=<font color="#003366">Getting started with RAICK</font>=
==<font color="#006666">Installation</font>==
First things first- you need to let RAICK install itself. Unlike other AI scripts RAICK is packaged into a single file. This file contains all of the logic needed to create the initial file and folder structure. It also creates the uninstaller that quickly removes those files, leaving just the `RAICK.lua` file.<br>
  * To install RAICK you first need to decide where to put it. A typical place for custom scripts is the `USER_AI` folder, but you are not limited to a specific place. Once you have decided where to put it you need to open your `AI.lua` or `AI_M.lua` file in either `AI` or `AI/USER_AI` folder(depending on what */hoai* setting you are planning to use) and put a single line of code there:
  <code language="lua">
require "./AI/USER_AI/RAICK.lua"
</code>
  This line of code assumes that you have put `RAICK.lua` to the `USER_AI` folder. The dot represents the folder of your Rangarok client. You could have also written the full path to RAICK:
  <code language="lua">
require "C:/Program Files/Gravity/Ragnarok/AI/USER_AI/RAICK.lua" -- Of course, you should put the actual path to your client if it is somewhere else
</code>
  And as i said you are not limited to your client folder only:
  <code language="lua">
require "C:/RAICK.lua"
</code>
  In this case all files and folders will be created right on the `C:/` disk.<br>
  * Once `RAICK.lua` is linked with the `AI.lua` or `AI_M.lua` file you'll just need to launch the script from the game(activate your homunculus/mercenary). For a moment you will see a command-prompt window, which will signal that the installation has been performed.

  * If a new version if RAICK is released then you just need to replace the `RAICK.lua` file and the update is compeleted.
  _Note: If you have used the beta version then it is best if you replace `RAICK.lua` with the new file, run it and uninstall RAICK using the created uninstaller(the beta version didn't have one). After that install the script again._<br><br>
----
==<font color="#006666">Files & Folders</font>==
The schema below illustrates the full set of files that RAICK can create:
<pre>
-\
 |-\ "Homunculus Script"
   |-\ "Logs & Errors"
     |- "Error History.txt"
   |- "`[0]` Memory.lua"
   |- "`[1]` On Startup.lua"
   |- "`[2]` Commands.lua"
   |- "`[3]` Skills.lua"
   |- "`[4]` Messages.lua"
   |- "`[5]` Activities.lua"
 |-\ "Mercenary Script"
   |-\ "Logs & Errors"
     |- "Error History.txt"
   |- "`[0]` Memory.lua"
   |- "`[1]` On Startup.lua"
   |- "`[2]` Commands.lua"
   |- "`[3]` 1. Common Skills.lua"
   |- "`[3]` 2. Bowman Skills.lua"
   |- "`[3]` 3. Fencer Skills.lua"
   |- "`[3]` 4. Lancer Skills.lua"
   |- "`[4]` Messages.lua"
   |- "`[5]` Activities.lua"
 |- "RAICK.Bugz.txt
 |- "RAICK.lua"
 |- "RAICK.Settings.lua"
 |- "RAICK.Uninstall.bat"
</pre>
Most of them are created during installation, others during runtime, when needed. You can see that homunculus and mercenary scripts are separated into different folders for easier management.<br><br>
===<font color="#006600">Common Files</font>===
  * <u>*RAICK.Bugz.txt* file</u>
  This file is created(and later updated) when RAICK encounters a bug inside itself. The entry will contain the time when the error occurep and a copy of the error window. This is possible, because RAICK is smart enough to classify errors and can even distinguish between errors that occured in your script from the ones that occured inside the framework.
  * <u>*RAICK.Settings.lua* file</u>
  This file is used to configure RAICK. See next section for more details.
  * <u>*RAICK.Uninstall.bat* file</u>
  Run this script if you want to uninstall RAICK. All files that have been created during installation will be deleted.<br>
===<font color="#006600">AI Specific Files</font>===
  * <u>*Homunculus Script* folder</u>
  The structure of the folder is designed for maximum efficiency and convinience. Files are numbered to mimic the order, in which they are loaded upon startup of AI and also how they are processed later, when the client starts calling the script.
    * <u>*Logs & Errors* folder</u><br><br>
      * <u>*Error History.txt* file</u>
      This file is created(and later updated) when RAICK encounters an error inside your script. The entry will contain the time when the error occurep and a copy of the error window.
    * <u>*`[`0`]` Memory.lua* file</u>
    In this file RAICK stores values that you have decided to save. Saving data to a file is the only way to prevent it from being lost when the AI stops working(your homunculus/mercenary are not longer on the screen).
    * <u>*`[`1`]` On Startup.lua* file</u>
    In this file you define your custom variables or functions that you want to use in your script. This file is loaded once when the script starts. It is typical place for reading saved data from the memory or putting initial values to variables.
    * <u>*`[`2`]` Commands.lua* file</u>
    This is the place where you can define your own custom ways to interpet _Alt + Something_ commands that come from the player. Default handlers are auto-generated so you just have to modify them.
    * <u>*`[`3`]` Skills.lua* file</u>
    File with the same structure as the previous one, only here you can customize the way skill commands are interpreted by your AI.
    * <u>*`[`4`]` Messages.lua* file</u>
    In this file you can also define handlers like two previous ones, but they are meant to intercept messages that bots send to each other. This is a unique feature that allows sending arbitary data between homunculus and mercenary AI's.
    * <u>*`[`5`]` Activities.lua* file</u>
    The "heart" of your AI. Here you must define activities that you want your homunculus/mercenary to perform. Activities(also known as _states_ in most of AI's) is just a way to divide your script into logical parts. Each activity is a set of actions, which your logically group under some name. For example, the basic set of activities is:
      * _Passive_ - Don't react to anything. Just follow the owner.
      * _Active_ - If a monster is in sight then start chasing it(switch to _Chase_ activity), if not then follow owner.
      * _Chase_ - Chase the monster until you get close enough and then start attacking it(switch to _Attack_ activity).
      * _Attack_ - Attack the monster until it is killed or no longer in sight and then start looking for the next one(switch to _Active_ activity).
    Now, all you need to do is put these words into code and you have yourself a primitive AI.
  * <u>*Mercenary Script* folder</u>
  This folder basically mirrors the *Homunculus Script* folder. The only difference is that the *`[`3`]` Skills.lua* file is divided into separate parts, since mercenaries have a lot more targeted skills than homunculi do.<br><br>
----
==<font color="#006666">Settings</font>==
RAICK can be configured using the `RAICK.Settings.lua` file. Currently RAICK has 4 settings:
  * *VisionRange*
  <u>Default:</u> `14`<br>
  <u>Supported values:</u> `number >0`<br>

  The distance between your character and the visible edge of the screen(not the one you can see if you zoom out, but the one where objects, monsters etc are no longer visible). Typically it is 14 cells, but if you play on some unique server, then it might be different.
  * *Language*
  <u>Default:</u> `EN`<br>
  <u>Supported values:</u> `EN, RU`<br>

  Currently RAICK supports only English and Russian. This settings affects mainly error messages.
  * *LoggersUseTraceAI*
  <u>Default:</u> `NO`<br>
  <u>Supported values:</u> `YES, NO, ON, OFF`<br>

  Defines whether Logger objects react to */traceai* command status. This will be explained in the next chapter.
  * *BotCommunication*
  <u>Default:</u> `OFF`<br>
  <u>Supported values:</u> `YES, NO, ON, OFF`<br>

  Turns communication between homunculus and mercenary ON or OFF. This will be explained in the next chapter.
The names of settings and the values that they support are case insensitive, furthermore you can even separate different words with underscopes. For example:
  * visionrange
  * ViSion`___`RanGE
  * VISION`_`RANGE
  * VisionRange
Would all refer to the same setting. The same is with values:
  * Yes
  * No
  * On
  * Off
  * ON
  * OfF
Are all permitted. It does not matter if you write `'ON'` or `ON` inside this file, since variable names are translated into strings.<br>
And one more thing- if you omit/delete some setting the default value will be used. All of this is done for your convenience.<br><br>
----
==<font color="#006666">Lets learn it together!</font>==
The best way to learn something in programming is by doing practical exercises or writing something yourself, so lets write a simple AI using RAICK. This way by the end of this chapter you will have both a working script and an idea whether RAICK actually suits your needs.
===<font color="#006600">The initial idea</font>===
First of all, you need to have a clear idea of what you want from your AI. Every AI has a main purpose and this purpose defines the principles that you will use when creating it. Will it be for PvP or for mob killing only or maybe you would like to make a tank out of your homunculus/mercenary that would try to provoke monsters on itself. Of course, it is easy to say that: "I want it to be as cool as RampageAI!", but would not it be easier just to use Rampage instead? RAICK is not meant(but still can be used) to build super-complex AI's that do everything, because those AI's are already created and i don't think that you can make something even close to AzzyAI or RAIL, not speaking of writing a better one. Instead RAICK gives you, on the one hand, a way to get into the scripting process with less pain and, on the other hand, the possibility to write small scripts that 100% fulfill your needs. When your needs change, your script will change with them. This way you can initially write yourself a very simple script and modify it as your needs and your skills in programming will grow. Small, but constant changes to your script- that is the pattern i recommend following, when creating your AI using RAICK.<br>
So, going back to the idea. Lets create a script for homunculus Vanilmirth that would allow us to:
  * Give homunculus orders to attack a specified target using both Caprise and normal attacks
  * Auto-attack those who are damaging your character or homunculus and use caprise on those, who cast something on us(excluding support skills)
  * Switch between active and passive modes
Those 3 objectives now give us something to move further and start writing our first lines of code.<br><br>
----
===<font color="#006600">First lines of code</font>===
Lets move to our workplace- the `Homunculus AI` directory:
  * Open `On Startup` file
  * Here we can initialize(put initial values to) the variables that we are going to use
  * This is not entirely needed, but it allows us to eliminate the need to check (since your script is unaware whether the 
  * Right now the only one we will need is the one, where we would store our target
  * So we write:
  <code language="lua">
  target = Actor()
  -- 'Actor()' is a contructor for the object 'Actor', which represents all objects that ..
  -- .. your homunculus/mercenary can see(monsters, players, NPCs).
  -- Normally, you would pass the ID of the object as an argument, but ..
  -- .. here we don't do it and as a result we get a "blank" Actor object.
  -- The blank actor represents the absence of one, like nil the absence of any value, but ..
  -- .. as you will see later in our case it is better than nil.
  </code>