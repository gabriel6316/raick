=<font color="#003366">Welcome, AI Lovers!</font>=

You are visiting the homepage of a unique project. Although, it is created for AI purposes, it is not really an AI. RAICK could be defined as a _framework_ for AI creation. Now, this word may not be very familiar to you, but it is actually a very simple concept. It it a set of tools, which brings AI creation to a whole new level. It hides all the nerdy and complex programming stuff and in exchange gives a simple set of intuitive and easy-to-use tools for you to program your homunculus/mercenary your way. As many IT people like to say about frameworks:<br><br>
_It takes care of the plumbing and lets you define only the things that really matters with minimum effort and time consumption_ Â© Me =D
==<font color="#006666">For newbies in programming</font>==
So, to put it simple:
  * You can be interested in this project if:
    # You want to learn how to program your homunculus/mercenary, but the standard way is too complex for you
    # You would like to have more control over the actions of your homunculus/mercenary than just editing config files
    # You want to learn how AI scripts function
  * This tool is probably *NOT* for you if:
    # The mere word "programming" makes you want to jump out of the window
    # You are fully satisfied with what other AI's offer you
    # You hate to learn new stuff

To put it even simpler, here is an ugly and scary piece of code from the default AI, which finds the closest monster attacking your character:
<code language="lua">
function    GetOwnerEnemy (myid)
    local result = 0
    local owner  = GetV (V_OWNER,myid)
    local actors = GetActors ()
    local enemys = {}
    local index = 1
    local target
    for i,v in ipairs(actors) do
        if (v ~= owner and v ~= myid) then
            target = GetV (V_TARGET,v)
            if (target == owner) then
                if (IsMonster(v) == 1) then
                    enemys`[index]` = v
                    index = index+1
                else
                    local motion = GetV(V_MOTION,v)
                    if (motion == MOTION_ATTACK or motion == MOTION_ATTACK2) then
                        enemys`[index]` = v
                        index = index+1
                    end
                end
            end
        end
    end

    local min_dis = 100
    local dis
    for i,v in ipairs(enemys) do
        dis = GetDistance2 (myid,v)
        if (dis < min_dis) then
            result = v
            min_dis = dis
        end
    end
    
    return result
end
</code>
And here is its analogue written using RAICK:
<code language="lua">
function    GetOwnerEnemy ()

    local agressors = List()

    for i, enemy in Owner.surround.each() do
        if enemy.group.is.Mob and enemy.target.is(Owner) and enemy.action.is.Attacking then
            agressors.add(enemy)
        end
    end
    
    return agressors.closestTo(Owner)
end
</code>
In the last one you can almost intuitively guess what the code chunk is doing. As for the default AI code, well, i think even one look at it makes you want to close the file and never touch it again. That's one of the main benefits of using RAICK- it does not scare you away. The framework provides a natural, close to human language way of writing your script. It brings AI programming closer to your, without limiting your possibilities.<br>
You can start with an [Lua introduction to AI and Lua] to build a foundation for understanding and working with RAICK.<br><br>
----
==<font color="#006666">For geeks and those just familiar with the craft</font>==
For those, who are already familiar with programming, here is what RAICK will offer your in terms of enhancing your AI scripting experience:
  * *Ready-to-use folder and file structure*
  Upon installation RAICK defines a simple file and directory layout. With only a few configuration nuances you can immediately engage in the scripting process.
  * *Object-oriented design*
  RAICK provides you with a set of simple, but powerful objects, which categorize the data used in the AI and provide convenient ways to manipulate it. The data is collected and analyzed for you- just reach out to get it!
  * *Handlers for player commands*
  Player commands are captured by handlers, which you don't even have to define- it is done for you. You just have to open the right file and customize them the way you like. What could be simpler than that?!
  * *Declerative state definition*
  States(which in RAICK are called Activities) are defined in the same way as handlers for player commands. You just have to define functions in a special file and they will automatically become your states. Switching between them is also done with one method call. Managing your states now takes just a fraction of the former time!
  * *Names instead of ID's*
  With RAICK you can forget about ID's in your script. Everything is replaced with names. Every monster, every skill- you just have to name it.
  * *Data persistence out of the box*
  Pretty much every data type used in the script can be serialized and retrieved upon startup of AI. This way you can prevent vital data(like targets and friend-lists) from being lost, when your script restarts. Preserving your crucial data has never been easier!
  * *Smart error handling*
  RAICK catches any errors that occur in your script. The error window will appear only once, after which your homunculus/mercenary will enter a Safe Mode. The error window itself will contain more detailed information about the cause of the error and will be logged to a file. RAICK can even analyze errors and inform you if the error is caused by a bug inside RAICK. This way you can just paste the error log in a bug report and i will immediately have the information to fix it. You can kiss the annoying endless default error window goodbye!
  * *Exchange of data between your homunculus and mercenary*
  You just have to flip the switch(turn on the corresponding option) and your bots will immediately begin to communicate. Your homunculus will have full control over the actions of the mercenary and vice-versa. Programming different cooperation scenarios- with RAICK it's a piece of pie!
If you want to get a feeling of RAICK i would advise you to read the [GettingStarted Getting Started] page first.